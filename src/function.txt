
関数化して役立ちそうなもの
Working button / Back to Working button
 　→　最後のappendの要素のみ変更するとか

うまく行かずdocument.getElementByIdの受け取りでエラー発生
const getTodoTask = (listclass, xButton) => {
  const deleteTarget = xButton.parentNode;
  document.getElementById(listclass).removeChild(deleteTarget);
  const text = xButton.parentNode.firstElementChild.innerText;
  const div = document.createElement("div");
  div.className = "list-row";
  const li = document.createElement("li");
  li.innerText = text;
  div.appendChild(li);
};

ボタンごとに関数化して流すほうがよさそう





const backtoworkButton = ()=>{
        //--関数化する対象①始まり
        const deleteTarget = backtoWorkButton.parentNode;
        document.getElementById("pending-list").removeChild(deleteTarget);
        const text = backtoWorkButton.parentNode.firstElementChild.innerText;

        const div = document.createElement("div");
        div.className = "list-row";
        //liタグ作成
        const li = document.createElement("li");
        li.innerText = text;
        //　　関数化する対象①-- 終わり//

        //todoリストに必要な要素を追加
        div.appendChild(li);
        div.appendChild(pendingButton);
        div.appendChild(completeButton);
        document.getElementById("working-list").appendChild(div);
}

const pendingButton = ()=>{
    const deleteTarget = pendingButton.parentNode;
    document.getElementById("incomplete-list").removeChild(deleteTarget);
    //入力値を受け取りたい
    const addTarget = pendingButton.parentNode;
    const text = addTarget.firstElementChild.innerText;
    // console.log(text); // 入力値が渡ったことを確認
    addTarget.textContent = null;
    // console.log(div);
    const li = document.createElement("li");
    li.innerText = text;
    //　　関数化する対象①-- 終わり//

    //ボタンの作成
    const backTodoButton = document.createElement("button");
    backTodoButton.innerText = "Back to Todo";
    const backtoWorkButton = document.createElement("button");
    backtoWorkButton.innerText = "Back to Working";
    //divタグの子要素に各要素を設定
    addTarget.appendChild(li);
    addTarget.appendChild(backTodoButton);
    addTarget.appendChild(backtoWorkButton);
    // console.log(addTarget); working　on todo の画面と同じ項目の追加に成功
    document.getElementById("pending-list").appendChild(addTarget);
}

const backTodoButton = ()=>{
        const deleteTarget = backTodoButton.parentNode;
        document.getElementById("complete-list").removeChild(deleteTarget);
        const text = backTodoButton.parentNode.firstElementChild.innerText;
        const div = document.createElement("div");
        div.className = "list-row";
        //liタグ作成
        const li = document.createElement("li");
        li.innerText = text;
        //　　関数化する対象①-- 終わり//

        //todoリストに必要な要素を追加
        div.appendChild(li);
        div.appendChild(workingButton);
        div.appendChild(pendingButton);
        div.appendChild(deleteButton);
        // working-listへdiv要素をappend
        // console.log(div); //div要素の追加までは完了
        document.getElementById("incomplete-list").appendChild(div);

}


DoneButton()

const deleteTarget = backTodoButton.parentNode;

====関数化できる====
const getoTodoTask = () => {}

document.getElementById(＊＊引数１＊＊).removeChild(deleteTarget);
        const text = **引数２**.parentNode.firstElementChild.innerText;
        const div = document.createElement("div");
        div.className = "list-row";
        const li = document.createElement("li");
        li.innerText = text;

const appendContent = () => {

}
        div.appendChild(li);
        div.appendChild(workingButton);
        div.appendChild(pendingButton);
        div.appendChild(deleteButton);
  ====関数化できる====
        document.getElementById("引数１の値によって変動する").appendChild(div);
      });
